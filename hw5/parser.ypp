%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "source.hpp"
    #include "allocator.h"
    #include "bp.hpp"
    #include "utils.hpp"
    using namespace std;
    using namespace output;
    
    int yylex();
    void yyerror(char const*);
    
    extern int yylineno;

    SymTable &sym = SymTable::getInstance();

    #define YYERROR_VERBOSE 1
    #define YYDEBUG 1
%}

%token ID
%token VOID
%token COMMA
%token SC
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token B
%token NUM
%token TRUE
%token FALSE
%token INT
%token BYTE
%token BOOL
%left IF
%nonassoc ASSIGN
%left OR
%left AND
%left EQUALITY
%left RELATIONAL
%left ADDITIVE
%left MULTIPLICATIVE
%nonassoc NOT
%left LPAREN RPAREN LBRACE RBRACE
%nonassoc STRING
%nonassoc ELSE

%%
Program: Funcs
{ 
  if(yychar != YYEOF) {
    errorSyn(yylineno);
    exit(0);
 }
 $$ = $1;
 if(!sym.has_main) {
    errorMainMissing();
    exit(0);
 }
  sym.pop();
  CodeBuffer::instance().printCodeBuffer();
}

Funcs: FuncDecl Funcs
{ 
  $$ = new Node("", yylineno);
  $$->setType($2);
  Delete(2, $1, $2); 
}
       | /*epsilon*/                            
{ 
  $$ = new Node("", yylineno); 
}
;
FuncDecl: RetType ID LPAREN {sym.push(SymTable::scope_type::FUNC);} Formals RPAREN
          { Node node($2->getName(), yylineno);
            node.m_type = $1->m_type;
            node.m_types_list = $5->m_types_list;
            sym.insert(&node, true);  // inserts function into scope
            sym.curr_func_ptr = openFunctionStack($1, $2, $5);
          }
          LBRACE Statements RBRACE     
{ 
  $$ = new Node($2->getName(), yylineno);
  $$->setType($1);
  $$->m_types_list = std::move($5->m_types_list);
  sym.pop();
  if($2->m_name == "main" && ($1->m_type != types::Void || $$->m_types_list.size() != 0)) {
    errorDef($2->m_lineno, $2->m_name);
    exit(0);
  }
  CodeBuffer::instance().emit("}");
  /* TODO: handle assings to function variables and reads from variables
  */
  Delete(8, $1, $2, $3, $5, $6, $8, $9, $10); 
}
;
RetType: Type                                                       { $$ = $1; }
        | VOID                                                      { $$ = $1; }
;
Formals: FormalsList                                                { $$ = $1; }
        | /*epsilon*/                                               { $$ = new Node("", yylineno); }
; 
FormalsList: FormalDecl                                             { $$ = $1; }
        | FormalDecl COMMA FormalsList
{ 
  $$ = $1;
  $$->m_types_list.insert($$->m_types_list.end(),
                          $3->m_types_list.begin(),
                          $3->m_types_list.end());
  Delete(2, $2, $3); 
}
;
FormalDecl: Type ID
{ 
  $$ = new Node($2->getName(), yylineno);
  $$->setType($1);
  $$->m_types_list.push_back($1->m_type);
  Delete(2, $1, $2);
  sym.insert_arg($$);
}
; 
Statements: Statement
{ 
  $$ = $1;
}
            | Statements Statement
{ 
  $$ = $1;
  $$->m_types_list.push_back($2->m_type);
  Delete(1, $2);
}
; 
Statement: LBRACE M1 Statements RBRACE
{ 
  $$ = $3;
  sym.pop(); 
  Delete(2, $1, $4);
}
            | Type ID SC
{ 
  $$ = $2;
  $$->setType($1);
  Delete(2, $1, $3);
  sym.insert($$);
}
            | Type ID ASSIGN Exp SC
{
  if(!allowed_implicit_assignment($1->m_type, $4->m_type)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = $2;
  $$->setType($1);
  $$->m_reg = $4->getReg();
  sym.insert($$);
  Delete(4, $3, $4, $5, $1);
}
            | ID ASSIGN Exp SC
{
  SymTable::Entry *entry = sym.find_entry($1->m_name);
  if(entry == nullptr || entry->is_func) {
    errorUndef(yylineno, $1->m_name);
    exit(0);
  }
  if(!allowed_implicit_assignment(entry->return_type, $3->m_type)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = $1;
  $$->m_type = entry->return_type;
  storeValInStack(sym.curr_func_ptr, $3->getReg(), entry->offset);
  Delete(3, $2, $3, $4);
}
            | Call SC
{
  $$ = $1;
  $$->setType($1);
  Delete(1, $2); 
}
            | RETURN SC
{
  SymTable::Entry &curr_func = sym.scopes_stack[0].entries.back();
  if(curr_func.return_type != types::Void) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node($1->getName(), yylineno);
  $$->m_type = types::Void;
  Delete(2, $1, $2);
}
            | RETURN Exp SC
{ 
  SymTable::Entry &curr_func = sym.scopes_stack[0].entries.back();
  if(curr_func.return_type == types::Void || 
     !allowed_implicit_assignment(curr_func.return_type, $2->m_type)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->setType($2);
  Delete(3, $1, $2, $3);
}
            | IF MIF LPAREN Exp RPAREN MCE Statement
{
  $$ = new Node($1->getName(), yylineno);
  $$->setType($7);
  Delete(5, $1, $3, $4, $5, $7); 
  sym.pop();
}
            | IF MIF LPAREN Exp RPAREN MCE Statement ELSE MELSE Statement
{ 
  $$ = new Node("", yylineno);
  $$->setType($7);
  Delete(7, $1, $3, $4, $5, $7, $8, $10); 
  sym.pop();
}
            | WHILE MWHILE LPAREN Exp RPAREN MCE Statement
{ 
  $$ = new Node($1->getName(), yylineno);
  $$->setType($7);  // statement may contain return value
  Delete(5, $1, $7, $3, $4, $5); 
  sym.pop();
}
            | BREAK SC
{ 
  if(!sym.isInScope(SymTable::scope_type::WHILE)) {
    errorUnexpectedBreak(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  Delete(2, $1, $2);
}
            | CONTINUE SC
{ 
  if(!sym.isInScope(SymTable::scope_type::WHILE)) {
    errorUnexpectedContinue(yylineno);
    exit(0);
  }
  $$ = new Node($1->getName(), yylineno);
  $$->setType($1);
  Delete(2, $1, $2);
}
; 
Call: ID LPAREN ExpList RPAREN
{
  SymTable::Entry *entry = sym.find_entry($1->m_name);
  if(entry == nullptr || (entry->is_func == false)) {
    errorUndefFunc(yylineno, $1->m_name);
    exit(0);
  }
  check_args_type($3, entry);
  $$ = new Node($1->getName(), yylineno);
  $$->m_type = entry->return_type;
  $$->m_types_list = std::move($3->m_types_list);
  Delete(4, $3, $4, $1, $2);
}
    | ID LPAREN RPAREN
{ 
  SymTable::Entry *entry = sym.find_entry($1->m_name);
  if(entry == nullptr || (entry->is_func == false)) {
    errorUndefFunc(yylineno, $1->m_name);
    exit(0);
  }
  if(entry->types_vec.size() != 0) {
    std::vector<std::string> strings_vec = TypesToStrings(entry->types_vec);
    errorPrototypeMismatch(yylineno, entry->name, strings_vec);
    exit(0);
  }
  $$ = new Node($1->getName(), yylineno);
  $$->m_type = entry->return_type;
  Delete(3, $1, $2, $3);
} %prec OR
; 
ExpList: Exp
{ 
  $$ = $1;
  $$->m_types_list.push_back($$->m_type);
}
    | Exp COMMA ExpList
{ 
  $$ = $1;
  $$->m_types_list.push_back($$->m_type);
  $$->m_types_list.insert($$->m_types_list.end(),
                          $3->m_types_list.begin(),
                          $3->m_types_list.end());
  Delete(2, $2, $3);
}
; 
Type: INT                                 { $$ = $1; }
    | BYTE                                { $$ = $1; }
    | BOOL                                { $$ = $1; }
; 
Exp : LPAREN Exp RPAREN                   { $$ = $2; }
    | Exp IF LPAREN Exp RPAREN ELSE Exp
{ 
  if($4->m_type != types::Bool ||
     !(allowed_implicit_assignment($1->m_type, $7->m_type) || 
       allowed_implicit_assignment($7->m_type, $1->m_type))) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->setType($1);
  if($1->m_type == types::Int || $7->m_type == types::Int) {
    $$->m_type = types::Int;
  }
  Delete(7, $1, $2, $3, $4, $5, $6, $7);
} %prec IF
    | Exp ADDITIVE Exp
{ 
  if(!$1->isNumType() || !$3->isNumType()) {
      errorMismatch(yylineno);
      exit(0);
    }
    $$ = new Node("", yylineno);
    $$->setType($1);
    if($1->m_type == types::Int || $3->m_type == types::Int) {
      $$->m_type = types::Int;  // result has bigger type
    }
    emitBinopRes($1, $3, $2->m_name, $$);
    Delete(3, $1, $2, $3);
}
    | Exp MULTIPLICATIVE Exp
{
  if(!$1->isNumType() || !$3->isNumType()) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->setType($1);
  if($1->m_type == types::Int || $3->m_type == types::Int) {
    $$->m_type = types::Int;  // result has bigger type
  }
  emitBinopRes($1, $3, $2->m_name, $$);
  Delete(3, $1, $2, $3);
}
    | ID
{ 
  $$ = $1;
  SymTable::Entry *entry = sym.find_entry($1->m_name);
  if(!entry || entry->is_func) {
    errorUndef(yylineno, $1->m_name);
    exit(0);
  }
  $$->m_type = entry->return_type;
}
    | Call
{ 
  $$ = new Node("", yylineno);
  $$->setType($1);     
  Delete(1, $1);
}
    | NUM
{ 
  $$ = $1;
}
    | NUM B
{ 
  $$ = new ByteType(($1->m_name).c_str(), yylineno);
  Delete(2, $1, $2);
}
    | STRING
{ 
  $$ = $1;
}
    | TRUE
{ 
  $$ = new Node("", yylineno);
  $$->m_type = types::Bool;
  emitLabelAndGoto($$, $$->true_list);
  Delete(1, $1);
}
    | FALSE
{ 
  $$ =new Node("", yylineno);
  $$->m_type = types::Bool;
  emitLabelAndGoto($$, $$->false_list);
  Delete(1, $1); 
}
    | NOT Exp
{ 
  if(($2->m_type != types::Bool)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->m_type = types::Bool;
  $$->true_list = $2->false_list;
  $$->false_list = $2->true_list;
  Delete(2, $1, $2); 
}
    | Exp AND Exp
{ 
  if(($1->m_type != types::Bool) || ($3->m_type != types::Bool)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->m_type = types::Bool;
  emitBooleanBlockShortCircuit($1, $3, "AND", $$);
  Delete(3, $1, $2, $3);
}
    | Exp OR Exp
{ 
  if(($1->m_type != types::Bool) || ($3->m_type != types::Bool)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->m_type = types::Bool;
  emitBooleanBlockShortCircuit($1, $3, "OR", $$);
  Delete(3, $1, $2, $3);
}
    | Exp EQUALITY Exp
{ 
  if(!($1->isNumType()) || !($3->isNumType())) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->m_type = types::Bool;
  emitBooleanBlockRelaEq($1, $3, $2->m_name, $$);
  Delete(3, $1, $2, $3);
}
    | Exp RELATIONAL Exp
{ 
  if(!($1->isNumType()) || !($3->isNumType())) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node("", yylineno);
  $$->m_type = types::Bool;
  emitBooleanBlockRelaEq($1, $3, $2->m_name, $$);
  Delete(3, $1, $2, $3);
}
    | LPAREN Type RPAREN Exp
{
  if(!allowed_explicit_assignment($2->m_type, $4)) {
    errorMismatch(yylineno);
    exit(0);
  }
  $$ = new Node($4->m_name.c_str(), yylineno);
  $$->m_type = $2->m_type;
  Delete(4, $1, $2, $3, $4);
}
;
// open scope:
M1 : { sym.push(); }
MIF : { sym.push(SymTable::scope_type::IF); }
MELSE : { sym.pop(); sym.push(SymTable::scope_type::ELSE); }
MWHILE : { sym.push(SymTable::scope_type::WHILE); }
MCE: { if(yyvsp[-1]->m_type != types::Bool) {
           errorMismatch(yyvsp[-1]->m_lineno);
           exit(0);
       } } // Check Exp
;
%%

int main()
{
    /* yydebug = 1; */
    return yyparse();
}

void yyerror(char const* s) {
    errorSyn(yylineno);
    exit(0);
}