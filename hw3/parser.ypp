%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "source.hpp"
    using namespace std;
    using namespace output;
    
    int yylex();
    void yyerror(char const*);
    
    extern int yylineno;

    #define YYERROR_VERBOSE 1
    #define YYDEBUG 1
%}

%token ID
%token VOID
%token COMMA
%token SC
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token B
%token NUM
%token TRUE
%token FALSE
%token INT
%token BYTE
%token BOOL
%left IF
%nonassoc ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADDITIVE
%left MULTIPLICATIVE
%nonassoc NOT
%left LPAREN RPAREN LBRACE RBRACE
%nonassoc STRING
%nonassoc ELSE

%%
Program: Funcs                                                      {$$ = $1;}
; 
Funcs: FuncDecl Funcs                                               {$$ = new Node();
                                                                     $$->setType($2);
                                                                     $$->SetValue($1.m_string_val+$2.m_string_val);
                                                                     Delete(2,$1,$2);
                                                                    }
       | /*epsilon*/                                                { $$ = new Node(); }
;
FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { $$ = new Node($2->getName());
                                                                      $$->setType($1);
                                                                      $$->setValue($2);
                                                                      $$->m_types_list = std::move($4->m_types_list);
                                                                      Delete(8, $1, $2, $3, $4, $5, $6, $7, $8); }
; 
RetType: Type                                                       {
                                                                        $$ = $1;
                                                                    }
        | VOID                                                      { $$ = $1; }
;
Formals: FormalsList                                                { $$ = $1; }
        | /*epsilon*/                                               {
                                                                        $$ = new Node();
                                                                    }
; 
FormalsList: FormalDecl                                             {
                                                                        $$ = $1;
                                                                    }
        | FormalDecl COMMA FormalsList                              { $$ = $1;
                                                                      // TODO: check types in FormalsList
                                                                      $$->m_types_list.insert($$->m_types_list.end(),
                                                                                              $3->m_types_list.begin(),
                                                                                              $3->m_types_list.end());
                                                                      Delete(2, $2, $3); }
;
FormalDecl: Type ID                                                 { $$ = new Node();
                                                                      $$->setType($1);
                                                                      $$->m_types_list.push_back($1->m_type);
                                                                      Delete(2, $1, $2); }
; 
Statements: Statement                                               { $$ = $1; }
            | Statements Statement                                  {
                                                                    // Both statement and statements
                                                                    // are biggest variables of unimportant type 
                                                                    // because program consists of statements
                                                                        $$ = $1;
                                                                        $$->m_types_list.push_back($2->m_type);
                                                                        delete $2;
                                                                    }
; 
Statement: LBRACE Statements RBRACE                                 { $$ = $2; }
            | Type ID SC                                            {$$ = new Node();
                                                                     $$->setType($1);
                                                                     $$->setValue($2.m_name);  // Id name is the interesting part
                                                                     Delete(3,$1,$2,$3);
                                                                    }
            | Type ID ASSIGN Exp SC                                 { $$ = new Node($2->getName());
                                                                      // TODO: check that Type and Exp types match
                                                                      $$->setType($1);
                                                                      $$->setValue($4);
                                                                      Delete(1, $2, $3, $4, $5 $1,); }
            | ID ASSIGN Exp SC                                      {
                                                                        $$ = new Node();
                                                                        $$->setType($1);
                                                                        $$->setValue($3);
                                                                        Delete(4,$1,$2,$3,$4);
                                                                        
                                                                    }
            | Call SC                                               { $$ = $1; 
                                                                      Delete(1, $2); }
            | RETURN SC                                             {
                                                                    //Same as Continue SC - Reduce rule
                                                                      $$ = new Node($1.m_name);
                                                                      $$->setType($1);
                                                                      $$->setValue($1.m_string_val);
                                                                      Delete(2,$1,$2);
                                                                      }
            | RETURN Exp SC                                         { $$ = new Node(); 
                                                                      $$->setType($2);
                                                                      $$->setValue($2);
                                                                      Delete(3, $3 $1, $2); }
            | IF LPAREN Exp RPAREN Statement                        {$$ = new Node($1.m_name);
                                                                      $$->setType($5);
                                                                      $$->setValue($1.m_string_val);
                                                                      Delete(5,$1,$2,$3,$4,$5);
                                                                      }
            | IF LPAREN Exp RPAREN Statement ELSE Statement         { $$ = new Node(); 
                                                                      // TODO: check Exp type
                                                                      //$$->m_type = types::Bool;
                                                                      $$->setType($5);
                                                                      $$->m_num_val = ($3->m_num_val != 0);
                                                                      Delete(7, $3, $4, $5, $6, $7 $1, $2,); }
            | WHILE LPAREN Exp RPAREN Statement                     {
                                                                      $$ = new Node($1.m_name);
                                                                      $$->setType($5);
                                                                      // statement may contain return value
                                                                      $$->setValue($1.m_string_val);
                                                                      Delete(5,$1,$2,$3,$4,$5);
                                                                    }
            | BREAK SC                                              { $$ = new Node(); 
                                                                      // TODO: check that we are in a while loop
                                                                      Delete(2, $1, $2); }
            | CONTINUE SC                                           {$$ = new Node($1.m_name);
                                                                      $$->setType($1);
                                                                      $$->setValue($1.m_string_val);
                                                                      Delete(2, $1, $2);
                                                                      }
; 
Call: ID LPAREN ExpList RPAREN                                      { $$ = new Node($1->getName());
                                                                      // TODO: check that ExpList types and len matches ID
                                                                      $$->m_types_list = std::move($3->m_types_list);
                                                                      Delete(4, $3, $4 $1, $2); }
    | ID LPAREN RPAREN                                              {
                                                                    //To think about - How we address return type
                                                                    //and arguments of func
                                                                    // is it needed in object itself?
                                                                      $$ = new Node($1.m_name);
                                                                      //$$.m_type = types::Func;
                                                                      $$->setType($1);
                                                                      // I saw we used type in exp Reduce so must be saved(?)
                                                                      $$->setValue($1.m_value);
                                                                      Delete(2, $3, $2);  
                                                                    } %prec OR
; 
ExpList: Exp                                                        { $$ = $1; }
    | Exp COMMA ExpList                                             {
                                                                      $$ = new Node();
                                                                      $$->setType($1);
                                                                      $$->setValue($1.m_name + $3.m_string_val);
                                                                      Delete(3, $1, $2,$3);
                                                                      }
; 
Type: INT                                                           { $$ = $1; }
    | BYTE                                                          { $$ = $1; }
    | BOOL                                                          { $$ = $1; }
; 

Exp : LPAREN Exp RPAREN                                             { $$ = $2; }
    | Exp IF LPAREN Exp RPAREN ELSE Exp                             { $$ = new Node();
                                                                      $$->setType($1);
                                                                      Delete(7, $1, $2, $3, $4, $5, $6, $7); }
    | Exp ADDITIVE Exp                                              { $$ = new Node();
                                                                      $$->setType($1);
                                                                      $$->setValue($1, $2, $3);
                                                                      Delete(3, $1, $2, $3);}
    | Exp MULTIPLICATIVE Exp                                        { $$ = new Node();
                                                                      $$->setType($1);     
                                                                     $$->setValue($1, $2, $3); 
                                                                      Delete(3, $1, $2, $3); }
    | ID                                                            { $$ = new Node();
                                                                      $$->setType($1);     
                                                                      $$->m_name = $1->m_name; 
                                                                      Delete(1, $1); }
    | Call                                                          { $$ = new Node();
                                                                      $$->setType($1);     
                                                                      Delete(1, $1); }
    | NUM                                                           { $$ = $1; }
    | NUM B                                                         { $$ = new ByteType();
                                                                      $$->m_type == types::Byte;
                                                                      $$->m_num_val = $1->m_num_val; 
                                                                      Delete(2, $1, $2); }
    | STRING                                                        { $$ = $1; }
    | TRUE                                                          { $$ = new Node();
                                                                      $$->m_type = types::Bool;
                                                                      $$->m_num_val = 1; 
                                                                      Delete(1, $1); }
    | FALSE                                                         { $$ =new Node();
                                                                      $$->m_type = types::Bool;
                                                                      $$->m_num_val = 0; 
                                                                      Delete(1, $1); }
    | NOT Exp                                                       { $$ = new Node();
                                                                      $$->m_type = types::Bool; 
                                                                      $$->m_num_val = !($2->m_num_val);
                                                                      Delete(2, $1, $2); }
    | Exp AND Exp                                                   { $$ = new Node();
                                                                      $$->m_type = types::Bool;
                                                                      $$->setValue($1, $2, $3);
                                                                      Delete(3, $1, $2, $3); }
    | Exp OR Exp                                                    { $$ = new Node();
                                                                      $$->m_type = types::Bool;
                                                                      $$->setValue($1, $2, $3);
                                                                      Delete(3, $1, $2, $3); }
    | Exp EQUALITY Exp                                              { $$ = new Node();
                                                                      $$->m_type = types::Bool;
                                                                      $$->setValue($1, $2, $3);
                                                                      Delete(3, $1, $2, $3); }
    | Exp RELATIONAL Exp                                            { $$ = new Node();
                                                                      $$->m_type = types::Bool;
                                                                      $$->setValue($1, $2, $3);
                                                                      Delete(3, $1, $2, $3); }
    | LPAREN Type RPAREN Exp                                        { $$ = new Node($4->m_name.c_str());
                                                                      $$->m_type = $2->m_type;
                                                                      $$->setValue($4);
                                                                      Delete(4, $1, $2, $3, $4); }
;
%%

int main()
{
    /* yydebug = 1; */
    return yyparse();
}

void yyerror(char const* s) {
    errorSyn(yylineno);
    exit(0);
}