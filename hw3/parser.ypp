%{
    #include <iostream>
    #include "output.hpp"
    using namespace std;
    using namespace output;
    
    int yylex();
    void yyerror(char const*);
    
    extern int yylineno;

    #define YYERROR_VERBOSE 1
    #define YYDEBUG 1
%}

%token ID
%token VOID
%token COMMA
%token SC
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token B
%token NUM
%token TRUE
%token FALSE
%token INT
%token BYTE
%token BOOL
%nonassoc ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADDITIVE
%left MULTIPLICATIVE
%nonassoc NOT
%left LPAREN RPAREN LBRACE RBRACE
%nonassoc STRING
%nonassoc ELSE

%%
Program: Funcs                                                      {printProductionRule(1);}
; 
Funcs: FuncDecl Funcs                                               {printProductionRule(3);}
       | /*epsilon*/                                                {printProductionRule(2);}
;
FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {printProductionRule(4);}
; 
RetType: Type                                                       {printProductionRule(5);}
        | VOID                                                      {printProductionRule(6);}
;
Formals: FormalsList                                                {printProductionRule(8);}
        | /*epsilon*/                                               {printProductionRule(7);}
; 
FormalsList: FormalDecl                                             {printProductionRule(9);}
        | FormalDecl COMMA FormalsList                              {printProductionRule(10);}
; 
FormalDecl: Type ID                                                 { $$ = new Node($2.m_name);
                                                                      $$.m_type = $1.m_type;
                                                                      $$.setValue($2);
                                                                      delete $1;
                                                                      delete $2; }
; 
Statements: Statement                                               {printProductionRule(12);}
            | Statements Statement                                  {printProductionRule(13);}
; 
Statement: LBRACE Statements RBRACE                                 {printProductionRule(14);}
            | Type ID SC                                            {printProductionRule(15);}
            | Type ID ASSIGN Exp SC                                 {printProductionRule(16);}
            | ID ASSIGN Exp SC                                      {printProductionRule(17);}
            | Call SC                                               {printProductionRule(18);}
            | RETURN SC                                             {printProductionRule(19);}
            | RETURN Exp SC                                         {printProductionRule(20);}
            | IF LPAREN Exp RPAREN Statement                        {printProductionRule(21);}
            | IF LPAREN Exp RPAREN Statement ELSE Statement         {printProductionRule(22);}
            | WHILE LPAREN Exp RPAREN Statement                     {printProductionRule(23);}
            | BREAK SC                                              {printProductionRule(24);}
            | CONTINUE SC                                           {printProductionRule(25);}
; 
Call: ID LPAREN ExpList RPAREN                                      {printProductionRule(26);}
    | ID LPAREN RPAREN                                              {printProductionRule(27);} %prec OR
; 
ExpList: Exp                                                        {printProductionRule(28);}
    | Exp COMMA ExpList                                             {printProductionRule(29);}
; 
Type: INT                                                           { $$ = $1 }
    | BYTE                                                          { $$ = $1 }
    | BOOL                                                          { $$ = $1 }
; 

Exp : LPAREN Exp RPAREN                                             {$$ = $2
                                                                     delete $1;
                                                                     delete $3; }
    | Exp IF LPAREN Exp RPAREN ELSE Exp                             { $$ = new Node();
                                                                      $$.m_type = $1.m_type;
                                                                      delete $1; 
                                                                      delete $2;
                                                                      delete $3; 
                                                                      delete $4; 
                                                                      delete $5; 
                                                                      delete $6; 
                                                                      delete $7; }
    | Exp ADDITIVE Exp                                              { $$ = new Node();
                                                                      $$.m_type = $1.m_type;
                                                                      $$.m_num_val = $1.m_num_val + $2.m_num_val; 
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3; }
    | Exp MULTIPLICATIVE Exp                                        { $$ = new Node(); 
                                                                      $$.m_num_val = $1.m_num_val * $3.m_num_val; 
                                                                      $$.m_type = $1.m_type;
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3; }
    | ID                                                            { $$ = new Node();
                                                                      $$.m_name = $1.m_name; 
                                                                      delete $1; }
    | Call                                                          { $$ = new Node();
                                                                      $$.m_type = $1.m_type;
                                                                      delete $1; }
    | NUM                                                           { $$ = $1; }
    | NUM B                                                         { $$ = new ByteType();
                                                                      $$.m_type == types::Byte;
                                                                      $$.m_num_val = $1.m_num_val;
                                                                      delete $1;
                                                                      delete $2; }
    | STRING                                                        { $$ = $1 }
    | TRUE                                                          { $$ = new Node();
                                                                      $$.m_type = types::Bool;
                                                                      $$.m_num_val = 1;
                                                                      delete $1; }
    | FALSE                                                         { $$ = new Node();
                                                                      $$.m_type = types::Bool;
                                                                      $$.m_num_val = 0; 
                                                                      delete $1; }
    | NOT Exp                                                       { $$ = new Node();
                                                                      $$.m_type = types::Bool;
                                                                      delete $1;
                                                                      delete $2; }
    | Exp AND Exp                                                   { $$ = new Node();
                                                                      $$.m_type = types::Bool;
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3; }
    | Exp OR Exp                                                    { $$ = new Node();
                                                                      $$.m_type = types::Bool; 
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3; }
    | Exp EQUALITY Exp                                              { $$ = new Node();
                                                                      $$.m_type = types::Bool; 
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3; }
    | Exp RELATIONAL Exp                                            { $$ = new Node();
                                                                      $$.m_type = types::Bool; 
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3; }
    | LPAREN Type RPAREN Exp                                        { $$ = new Node($4.m_name);
                                                                      $$.m_type = $2.m_type;
                                                                      $$.setValue($4); 
                                                                      delete $1;
                                                                      delete $2;
                                                                      delete $3;
                                                                      delete $4; }
;
%%

int main()
{
    /* yydebug = 1; */
    return yyparse();
}

void yyerror(char const* s) {
    errorSyn(yylineno);
    exit(0);
}