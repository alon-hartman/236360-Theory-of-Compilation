%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "source.hpp"
    using namespace std;
    using namespace output;
    
    int yylex();
    void yyerror(char const*);
    
    extern int yylineno;

    SymTable sym;

    #define YYERROR_VERBOSE 1
    #define YYDEBUG 1
%}

%token ID
%token VOID
%token COMMA
%token SC
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token B
%token NUM
%token TRUE
%token FALSE
%token INT
%token BYTE
%token BOOL
%left IF
%nonassoc ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADDITIVE
%left MULTIPLICATIVE
%nonassoc NOT
%left LPAREN RPAREN LBRACE RBRACE
%nonassoc STRING
%nonassoc ELSE

%%
Program: Funcs                               { $$ = $1;
                                               if(!sym.has_main) {
                                                 errorMainMissing();
                                                 exit(0);
                                               }
                                               sym.pop(); }

Funcs: FuncDecl Funcs                           { $$ = new Node("", yylineno);
                                                  $$->setType($2);
                                                  $$->SetValue($1->m_string_val+$2->m_string_val);
                                                  Delete(2, $1, $2); }
       | /*epsilon*/                            { $$ = new Node("", yylineno); }
;
FuncDecl: RetType ID LPAREN {sym.push(SymTable::scope_type::FUNC);} Formals RPAREN 
        { Node node($2->getName(), yylineno);
          node.m_type = $1->m_type;
          node.m_types_list = $5->m_types_list;
          sym.insert(&node, true); } // inserts function into scope
          LBRACE Statements RBRACE     { $$ = new Node($2->getName(), yylineno);
                                         $$->setType($1);
                                         $$->setValue($2);
                                         $$->m_types_list = std::move($5->m_types_list);
                                         sym.pop();
                                         if($2->m_name == "main" && ($1->m_type != types::Void || $$->m_types_list.size() != 0)) {
                                             errorMainMissing();
                                             exit(0);
                                         }
                                         Delete(8, $1, $2, $3, $5, $6, $8, $9, $10); }
;
RetType: Type                                                       { $$ = $1; }
        | VOID                                                      { $$ = $1; }
;
Formals: FormalsList                                                { $$ = $1; }
        | /*epsilon*/                                               { $$ = new Node("", yylineno); }
; 
FormalsList: FormalDecl                                             { $$ = $1; }
        | FormalDecl COMMA FormalsList                              { $$ = $1;
                                                                      $$->m_types_list.insert($$->m_types_list.end(),
                                                                                              $3->m_types_list.begin(),
                                                                                              $3->m_types_list.end());
                                                                      Delete(2, $2, $3); }
;
FormalDecl: Type ID                                                 { $$ = new Node($2->getName(), yylineno);
                                                                      $$->setType($1);
                                                                      $$->m_types_list.push_back($1->m_type);
                                                                      Delete(2, $1, $2);
                                                                      sym.insert_arg($$); }
; 
Statements: Statement                                               { $$ = $1; }
            | Statements Statement                                  { $$ = $1;
                                                                      $$->m_types_list.push_back($2->m_type);
                                                                      Delete(1, $2); }
; 
Statement: LBRACE M1 Statements RBRACE  { $$ = $3;
                                          sym.pop(); 
                                          Delete(2, $1, $4); }
            | Type ID SC                { $$ = new Node($2->getName(), yylineno);
                                          $$->setValue($2);  // Id name is the interesting part
                                          $$->setType($1);
                                          Delete(3, $1, $2, $3);
                                          sym.insert($$); }
            | Type ID ASSIGN Exp SC     { if(!allowed_implicit_assignment($1->m_type, $4->m_type)) {
                                            errorMismatch(yylineno);
                                            exit(0);
                                          }
                                          $$ = new Node($2->getName(), yylineno);
                                          $$->setValue($4);
                                          $$->setType($1);
                                          Delete(5, $2, $3, $4, $5, $1);
                                          sym.insert($$); }
            | ID ASSIGN Exp SC          { SymTable::Entry *entry = sym.find_entry($1->m_name);
                                          if(entry == nullptr) {
                                            errorUndef(yylineno, $1->m_name);
                                            exit(0);
                                          }
                                          if(!allowed_implicit_assignment(entry->return_type, $3->m_type)) {
                                            errorMismatch(yylineno);
                                            exit(0);
                                          }
                                          $$ = new Node($1->getName(), yylineno);
                                          $$->setValue($3);
                                          $$->m_type = entry->return_type;
                                          Delete(4, $1, $2, $3, $4); }
            | Call SC                   { $$ = $1;
                                          $$->setType($1);
                                          Delete(1, $2); }
            | RETURN SC                 {
                                          SymTable::Entry &curr_func = sym.scopes_stack[0].entries.back();
                                          if(curr_func.return_type != types::Void) {
                                            errorMismatch(yylineno);
                                            exit(0);
                                          }
                                          $$ = new Node($1->getName(), yylineno);
                                          $$->m_type = types::Void;
                                          $$->setValue($1);
                                          Delete(2, $1, $2); }
            | RETURN Exp SC             { SymTable::Entry &curr_func = sym.scopes_stack[0].entries.back();
                                          if(curr_func.return_type == types::Void || 
                                             !allowed_implicit_assignment(curr_func.return_type, $2->m_type)) {
                                            errorMismatch(yylineno);
                                            exit(0);
                                          }
                                          $$ = new Node("", yylineno);
                                          $$->setType($2);
                                          $$->setValue($2);
                                          Delete(3, $1, $2, $3); }
            | IF MIF LPAREN Exp RPAREN Statement                    { if($4->m_type != types::Bool) {
                                                                        errorMismatch($4->m_lineno);
                                                                        exit(0);
                                                                      }
                                                                      $$ = new Node($1->getName(), yylineno);
                                                                      $$->setType($6);
                                                                      $$->setValue($1);
                                                                      Delete(5, $1, $3, $4, $5, $6); 
                                                                      sym.pop(); }
            | IF MIF LPAREN Exp RPAREN Statement ELSE MELSE Statement { 
                                                                      if(!($4->m_type == types::Bool)) {
                                                                        errorMismatch($4->m_lineno);
                                                                        exit(0);
                                                                      }
                                                                      $$ = new Node("", yylineno);
                                                                      $$->setType($6);
                                                                      $$->m_num_val = ($4->m_num_val != 0);
                                                                      Delete(7, $1, $3, $4, $5, $6, $7, $9); 
                                                                      sym.pop(); }
            | WHILE MWHILE LPAREN Exp RPAREN Statement                { 
                                                                      if(!($4->m_type == types::Bool)) {
                                                                        errorMismatch($4->m_lineno);
                                                                        exit(0);
                                                                      }
                                                                      $$ = new Node($1->getName(), yylineno);
                                                                      $$->setType($6);  // statement may contain return value
                                                                      $$->setValue($1);
                                                                      Delete(5, $1, $6, $3, $4, $5); 
                                                                      sym.pop(); }
            | BREAK SC            { if(!sym.isInScope(SymTable::scope_type::WHILE)) {
                                      errorUnexpectedBreak(yylineno);
                                      exit(0);
                                    }
                                    $$ = new Node("", yylineno);
                                    Delete(2, $1, $2); }
            | CONTINUE SC         { if(!sym.isInScope(SymTable::scope_type::WHILE)) {
                                      errorUnexpectedContinue(yylineno);
                                      exit(0);
                                    }
                                    $$ = new Node($1->getName(), yylineno);
                                    $$->setType($1);
                                    $$->setValue($1);
                                    Delete(2, $1, $2); }
; 
Call: ID LPAREN ExpList RPAREN    { SymTable::Entry *entry = sym.find_entry($1->m_name);
                                    if(entry == nullptr) {
                                      errorUndefFunc(yylineno, $1->m_name);
                                      exit(0);
                                    }
                                    check_args_type($3, entry);
                                    $$ = new Node($1->getName(), yylineno);
                                    $$->m_type = entry->return_type;
                                    $$->m_types_list = std::move($3->m_types_list);
                                    Delete(4, $3, $4, $1, $2); }
    | ID LPAREN RPAREN            { SymTable::Entry *entry = sym.find_entry($1->m_name);
                                    if(entry == nullptr) {
                                      errorUndefFunc(yylineno, $1->m_name);
                                      exit(0);
                                    }
                                    if(entry->types_vec.size() != 0) {
                                      std::vector<std::string> strings_vec = TypesToStrings(entry->types_vec);
                                      errorPrototypeMismatch(yylineno, entry->name, strings_vec);
                                      exit(0);
                                    }
                                    $$ = new Node($1->getName(), yylineno);
                                    $$->m_type = entry->return_type;
                                    Delete(3, $1, $2, $3); } %prec OR
; 
ExpList: Exp                        { $$ = $1;
                                      $$->m_types_list.push_back($$->m_type); }
    | Exp COMMA ExpList             { $$ = $1;
                                      $$->m_types_list.push_back($$->m_type);
                                      $$->m_types_list.insert($$->m_types_list.end(),
                                                              $3->m_types_list.begin(),
                                                              $3->m_types_list.end());
                                      Delete(2, $2, $3); }
; 
Type: INT                                 { $$ = $1; }
    | BYTE                                { $$ = $1; }
    | BOOL                                { $$ = $1; }
; 

Exp : LPAREN Exp RPAREN                   { $$ = $2; }
    | Exp IF LPAREN Exp RPAREN ELSE Exp   { if($4->m_type != types::Bool ||
                                               !(allowed_implicit_assignment($1->m_type, $7->m_type) || 
                                                 allowed_implicit_assignment($7->m_type, $1->m_type))) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->setType($1);
                                            if($1->m_type == types::Int || $7->m_type == types::Int) {
                                              $$->m_type = types::Int;
                                            }
                                            Delete(7, $1, $2, $3, $4, $5, $6, $7); }
    | Exp ADDITIVE Exp                    { if(!$1->isNumType() || !$3->isNumType()) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->setType($1);
                                            if($1->m_type == types::Int || $3->m_type == types::Int) {
                                              $$->m_type = types::Int;  // result has bigger type
                                            }
                                            $$->setValue($1, $2, $3);
                                            Delete(3, $1, $2, $3);}
    | Exp MULTIPLICATIVE Exp              { if(!$1->isNumType() || !$3->isNumType()) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->setType($1);
                                            if($1->m_type == types::Int || $3->m_type == types::Int) {
                                              $$->m_type = types::Int;  // result has bigger type
                                            }
                                            $$->setValue($1, $2, $3); 
                                            Delete(3, $1, $2, $3); }
    | ID                                  { $$ = $1;
                                            SymTable::Entry *entry = sym.find_entry($1->m_name);
                                            if(!entry) {
                                              errorUndef(yylineno, $1->m_name);
                                              exit(0);
                                            }
                                            $$->m_type = entry->return_type; }
    | Call                                { $$ = new Node("", yylineno);
                                            $$->setType($1);     
                                            Delete(1, $1); }
    | NUM                                 { $$ = $1; }
    | NUM B                               { if($1->m_num_val > BYTE_SIZE) {
                                              errorByteTooLarge(yylineno, $1->m_name);
                                              exit(0);
                                            }
                                            $$ = new ByteType("", yylineno);
                                            $$->m_type == types::Byte;
                                            $$->m_num_val = $1->m_num_val; 
                                            Delete(2, $1, $2); }
    | STRING                              { $$ = $1; }
    | TRUE                                { $$ = new Node("", yylineno);
                                            $$->m_type = types::Bool;
                                            $$->m_num_val = 1; 
                                            Delete(1, $1); }
    | FALSE                               { $$ =new Node("", yylineno);
                                            $$->m_type = types::Bool;
                                            $$->m_num_val = 0; 
                                            Delete(1, $1); }
    | NOT Exp                             { if(($2->m_type != types::Bool)) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->m_type = types::Bool; 
                                            $$->m_num_val = !($2->m_num_val);
                                            Delete(2, $1, $2); }
    | Exp AND Exp                         { if(($1->m_type != types::Bool) || ($3->m_type != types::Bool)) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->m_type = types::Bool;
                                            $$->setValue($1, $2, $3);
                                            Delete(3, $1, $2, $3); }
    | Exp OR Exp                          { if(($1->m_type != types::Bool) || ($3->m_type != types::Bool)) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->m_type = types::Bool;
                                            $$->setValue($1, $2, $3);
                                            Delete(3, $1, $2, $3); }
    | Exp EQUALITY Exp                    { if(!($1->isNumType()) || !($3->isNumType())) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->m_type = types::Bool;
                                            $$->setValue($1, $2, $3);
                                            Delete(3, $1, $2, $3); }
    | Exp RELATIONAL Exp                  { if(!($1->isNumType()) || !($3->isNumType())) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node("", yylineno);
                                            $$->m_type = types::Bool;
                                            $$->setValue($1, $2, $3);
                                            Delete(3, $1, $2, $3); }
    | LPAREN Type RPAREN Exp              { if(!allowed_explicit_assignment($2->m_type, $4)) {
                                              errorMismatch(yylineno);
                                              exit(0);
                                            }
                                            $$ = new Node($4->m_name.c_str(), yylineno);
                                            $$->m_type = $2->m_type;
                                            $$->setValue($4);
                                            Delete(4, $1, $2, $3, $4); }
;
// open scope:
M1 : { sym.push(); }
MIF : { sym.push(SymTable::scope_type::IF); }
MELSE : { sym.pop(); sym.push(SymTable::scope_type::ELSE); }
MWHILE : { sym.push(SymTable::scope_type::WHILE); }
;
%%

int main()
{
    /* yydebug = 1; */
    return yyparse();
}

void yyerror(char const* s) {
    errorSyn(yylineno);
    exit(0);
}